<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多文件编译</title>
      <link href="/2023/12/14/%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91/"/>
      <url>/2023/12/14/%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p>在C++中，通常会将代码分割到多个源文件中，然后使用编译器将它们组合成一个可执行文件，这有助于组织和维护大型项目，并提高代码的可读性；并且为了更好的管理项目文件，可能会将头文件、源文件放在不同的文件夹中。这样，就需要在CMakeLists.txt文件中告诉编译器如何预处理、编译、链接这些文件。否则，编译器会因为找不到这些文件而报错。下面我将用一个简单的例子来说明这种情况下应该如何对项目进行构建。</p><h1>项目介绍</h1><h2 id="目录结构">目录结构</h2><p><img src="/2023/12/14/%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91/DirectoryStructure.jpg" alt></p><p>**include文件夹：**包含项目的头文件（f.h）<br>**src文件夹：**包含源文件(main.cpp,f.cpp)</p><h2 id="文件内容">文件内容</h2><p>f.h:</p><pre><code class="language-c++">#ifndef __F_H#define __F_H//f()函数声明void f();#endif</code></pre><p>f.cpp:</p><pre><code class="language-c++">#include&quot;f.h&quot;#include&lt;iostream&gt;//f()函数的定义，此函数打印当前函数的函数名称void f()&#123;std::cout&lt;&lt;__func__&lt;&lt;std::endl;&#125;</code></pre><p>main.cpp:</p><pre><code class="language-c++">#include&lt;iostream&gt;#include&quot;f.h&quot;int main()&#123;//调用f()函数    f();    return 0;&#125;</code></pre><h2 id="项目分析">项目分析</h2><p>可以看到此项目将头文件指定到了include文件夹里、源文件放在了src文件夹里，如果CMakeLists.txt文件还只是像我之前博客（<a href="https://elegancecoder.github.io/2023/12/11/vscode%E5%9F%BA%E4%BA%8Ecmake%E5%88%9B%E5%BB%BAcpp%E9%A1%B9%E7%9B%AE/">vscode基于cmake构建最小c++项目</a>）中那样编写：</p><pre><code class="language-cmake"> # 指定CMake的最小版本要求版本 cmake_minimum_required(VERSION 3.16)   # 指定项目名称  project(test)    # 指定需要编译的源文件和项目名称 add_executable(test main.cpp f.cpp)</code></pre><p>肯定会报各种错误🤣,这时我们需要对CMakeLists.txt文件进行略微的修改:</p><pre><code class="language-cmake">cmake_minimum_required(VERSION 3.25)#指定c++版本set(CMAKE_CXX_STANDARD 11)#指定头文件包含目录,&quot;./&quot;是当前目录的意思,默认是CMakeLists.txt文件所在的目录include_directories(./include)project(test)#这里也应该指定编译的源文件,否则编译器找不到我们需要编译的源文件add_executable(test ./src/main.cpp ./src/f.cpp)</code></pre><p>至此,项目能够正常的编译了👌.</p><h1>改进</h1><p><strong>虽然此项目能正常编译运行,但是CMakeLists.txt文件写法依然有可改进的地方,使得文件脉络更加清晰:</strong><br>1.&quot;./&quot;写法看着别扭,意思不明确.<br>2.添加源文件时需要对CMakeLists.txt文件中的add_executable命令指定新添加的字符串.<br>3.当源文件较多时,我们需要将所有源文件指定到add_executable命令中,此时该命令太过于臃肿,不利于CMakeLists.txt文件文件的维护.</p><p><strong>改进后的CMakeLists.txt文件:</strong></p><pre><code class="language-cmake">cmake_minimum_required(VERSION 3.25)#指定c++版本set(CMAKE_CXX_STANDARD 11)#CMAKE_CURRENT_SOURCE_DIR指的是当前正在处理的源文件的目录(因为复杂的项目可能有多重结构),这里指CMakeLists.txt所在的路径#$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;:取出当前变量的值include_directories($&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/include)#去$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src路径下搜索所有后缀为cpp的文件,并将它们储存到src变量中file(GLOB src $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src/*.cpp)project(test)#取出src变量的值,用于编译成二进制exe文件add_executable(test $&#123;src&#125;)</code></pre><p>自此,项目不仅能正常编译,CMakeLists.txt文件的脉络还清爽不少👍.再有源文件需要编译只需要创建之后放在src目录下即可,CMakeLists.txt文件无须改动.</p>]]></content>
      
      
      <categories>
          
          <category> vscode基于cmake构建c++项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> cmake </tag>
            
            <tag> msvc </tag>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode基于cmake构建最小c++项目</title>
      <link href="/2023/12/11/vscode%E5%9F%BA%E4%BA%8Ecmake%E5%88%9B%E5%BB%BAcpp%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/12/11/vscode%E5%9F%BA%E4%BA%8Ecmake%E5%88%9B%E5%BB%BAcpp%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1>前言</h1><p><strong>Visual Studio Code (VSCode) 是一款免费、开源、轻量级的代码编辑器，由 Microsoft 开发和维护，并受到开发者的广泛青睐，其自身也有着众多优势</strong>：<br>​<strong>轻量级与高性能：</strong> Visual Studio Code 是一款轻量级的编辑器，启动速度快，占用系统资源相对较少。这使得它成为快速、高效开发的理想选择。<br>​<strong>强大的代码编辑功能：</strong> 提供智能代码补全、代码片段、语法高亮、错误突出显示等功能，帮助开发者编写高质量的代码。<br>​<strong>丰富的扩展生态系统：</strong> Visual Studio Code 的扩展系统非常强大，允许开发者通过安装插件来定制 IDE 的功能。有大量的社区贡献的插件，覆盖了几乎所有主流编程语言和工具。<br>​<strong>集成版本控制：</strong> VSCode 集成了 Git 版本控制，提供了一套直观的界面来管理代码版本，以及方便的查看修改历史和解决冲突。<br>​<strong>内置调试支持：</strong> Visual Studio Code 提供了强大的调试功能，支持多种语言的调试器，并且能够通过简单的配置进行调试。<br>​<strong>内置终端：</strong> 集成了终端，允许开发者在编辑器中执行命令，从而更好地与代码交互。<br>​<strong>开源与社区活跃：</strong> VSCode 是开源项目，其源代码托管在 GitHub 上。拥有庞大的活跃社区，使得开发者能够分享经验、解决问题，并为软件的改进提供贡献。<br>​<strong>自定义配置：</strong> 支持广泛的自定义选项，使得开发者能够根据个人喜好和工作流程进行配置，从而提高开发效率。<br>​…<br>​<strong>总之，Visual Studio Code 是一款注重开发者体验、功能强大且高度可定制的编辑器，适用于各种规模和类型的项目（建议中小型项目），其简洁而强大的特性使得它成为许多开发者的首选工具。基于此，作者将用vscode基于cmake就c++项目开发的配置作详细的讲解，帮助初学编程的朋友快速上手vscode。</strong></p><h1>准备工作</h1><h2 id="安装vscode">安装vscode</h2><p>进入<a href="https://code.visualstudio.com/" title="点击进入vscode官网">vscode官网</a>下载vscode，若使用macos系统和linux系统，选择好对应版本即可：<a href="https://imgse.com/i/pifpIjs"><img src="https://z1.ax1x.com/2023/12/12/pifpIjs.png" alt="pifpIjs.png" border="0"></a></p><h2 id="安装cmake">安装cmake</h2><p>进入<a href="https://cmake.org/" title="点击进入vscode官网">cmake官网</a>下载cmake，若使用macos系统和linux系统，选择好对应版本，也可采用命令行方式下载，如果有疑问，请参照网上教程，这里不多赘述。</p><p><a href="https://imgse.com/i/pif9gM9"><img src="https://z1.ax1x.com/2023/12/12/pif9gM9.png" alt="pif9gM9.png" border="0"></a></p><h2 id="设置环境变量">设置环境变量</h2><p>将cmake软件安装目录下的bin目录设置为环境变量。以win11为例（其他操作系统请参照网上教程）：设置—系统—系统信息—高级系统设置—环境变量—path—编辑—新建—导入cmake软件安装目录下的bin目录—确认：<a href="https://imgse.com/i/pifPPfO"><img src="https://z1.ax1x.com/2023/12/12/pifPPfO.png" alt="pifPPfO.png" border="0"></a></p><h2 id="安装编译器">安装编译器</h2><p>这里根据自身需求进行安装，如果之前已经安装了VS或者是Qt等其他IDE这里则不必进行安装，如果是新手建议直接安装VS，这样vscode能直接扫描到VS里面的编译器。最简单直接的操作为在VS的安装程序里勾选C++桌面开发即可（也可在单个组件中选择自己需要的编译器）：<a href="https://imgse.com/i/pifPyu9"><img src="https://z1.ax1x.com/2023/12/12/pifPyu9.png" alt="pifPyu9.png" border="0"></a></p><h2 id="安装插件">安装插件</h2><p>您需要安装一些插件来让开发工作更加的顺畅：</p><h3 id="汉化">汉化</h3><p>在侧边栏点击拓展按钮，在搜索框中搜索Chinese，点击Install按钮来安装：</p><p><a href="https://imgse.com/i/pifPO4f"><img src="https://z1.ax1x.com/2023/12/12/pifPO4f.png" alt="pifPO4f.png" border="0"></a></p><h3 id="cmake帮助插件">cmake帮助插件</h3><p>在搜索框中搜索cmake，安装前三个插件（cmake、cmake tools、cmake language support）。</p><h3 id="c-c">c/c++</h3><p>在搜索框中搜索c++，安装c/c++插件。</p><h3 id="其他插件">其他插件</h3><p>如果还需要其他插件，如界面美化等，可自行网上搜索…</p><h3 id="重启vscode">重启vscode</h3><p>重启vscode让所安装的插件生效。</p><h2 id="构建最小c-项目">构建最小c++项目</h2><h3 id="创建文件夹">创建文件夹</h3><p>vscode一般以文件夹的形式来对项目进行管理，所以需要我们创建一个空文件夹来存放项目文件，名字自取。文件夹创建好后在vscode中打开文件夹。</p><h3 id="创建项目文件">创建项目文件</h3><h4 id="创建CMakeLists-txt">创建CMakeLists.txt</h4><p>创建CMakeLists.txt（字母包括大小写一个也不能错）文件来对项目进行有效的管理，文件创建好后，vscode的状态栏一般就能自动识别，读取相关的信息：<img src="/2023/12/11/vscode%E5%9F%BA%E4%BA%8Ecmake%E5%88%9B%E5%BB%BAcpp%E9%A1%B9%E7%9B%AE/%E7%8A%B6%E6%80%81%E6%A0%8F.png" alt></p><p>在状态栏中选择已经安装的编译器,在CMakeLists.txt文件中编写下列代码：</p><pre><code class="language-c++"> # 指定CMake的最小版本要求版本 cmake_minimum_required(VERSION 3.16)   # 指定项目名称  project(test)    # 指定需要编译的源文件和项目名称 add_executable(test test.cpp)</code></pre><h4 id="创建源文件">创建源文件</h4><p>创建一个test.cpp的源文件，随便编写一段c++代码：</p><pre><code class="language-c++">#include&lt;iostream&gt;int main()&#123;std::cout&lt;&lt;&quot;he&quot;&lt;&lt;std::endl;return 0;&#125;</code></pre><h3 id="构建项目">构建项目</h3><p>上述条件准备就绪以后，只需要在状态栏位置点击Build按钮即可生成可执行文件，然后点击状态栏的执行按钮可执行程序，如果不出意外就能看到在终端打印的he了！<br>什么？你问我要是出问题了怎么办？我只能说我也不知道，因为每个人的电脑配置都不一样，我也不能穷尽所有的情况，大致步骤就是以上这些，对于大多数人来说能正常运行。如果有问题的话就根据报错信息自行网上搜索解决方案，相信你能解决好的！</p>]]></content>
      
      
      <categories>
          
          <category> vscode基于cmake构建c++项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> cmake </tag>
            
            <tag> msvc </tag>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
